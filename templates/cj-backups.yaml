apiVersion: batch/v1
kind: CronJob
metadata:
  name: mysql-backup-{{ include "cgwi-php.fullname" . }}
  labels:
    {{- include "cgwi-php.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
          labels:
            run: db-backup
            {{- include "cgwi-php.labels" . | nindent 12 }}
        spec:
          containers:
          - command:
            - bash
            - -c
            - |
              set -Eeu -o pipefail;
              date;
              echo "Backing up individual database(s)"
              for db in $(
                echo show databases |
                mysql -u root -B -N |
                grep -Evw '(information_schema|performance_schema|sys)'
              )
              do
                echo Backing up $db
                BACKUP_FILE="${BACKUP_PATH}"/"$db".$(date +"%Y-%m-%d-%H-%M-%S.sql.gz")
                mysqldump -u root -h ${MYSQL_HOST:-mysql} --quick \
                    --comments --dump-date --lock-all-tables  \
                    --column-statistics=0 --flush-privileges --flush-logs \
                    "$db" \
                  | gzip > "$BACKUP_FILE"
                ln -srf "$BACKUP_FILE" "${BACKUP_PATH}/${db}.sql.gz"
                date
              done
              echo "Success!"
            envFrom:
            - secretRef:
                name: {{ include "cgwi-php.fullname" . }}-mysql
            env:
            - name: BACKUP_PATH
              value: /backups
            - name: MYSQL_HOST
              value: {{ include "cgwi-php.fullname" . }}-mysql
            - name: MYSQL_PWD
              value: $(MYSQL_ROOT_PASSWORD)
            image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
            imagePullPolicy: {{ .Values.mysql.image.pullPolicy }}
            name: mysql-backup-{{ include "cgwi-php.fullname" . }}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /backups
              name: backups-dir
              subPath: db
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30
          volumes:
          - name: backups-dir
            persistentVolumeClaim:
              claimName: backups-{{ include "cgwi-php.fullname" . }}
  schedule: 40 */6 * * *
  successfulJobsHistoryLimit: 4

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mysql-clean-backup-{{ include "cgwi-php.fullname" . }}
  labels:
    {{- include "cgwi-php.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
          labels:
            run: db-backup
            {{- include "cgwi-php.labels" . | nindent 12 }}
        spec:
          containers:
          - command:
            - bash
            - -c
            - |-
              for x in $(find ${BACKUP_PATH} -type f -mtime +7); do rm "$x"; done;
              echo 'Cleaned backups.'
            env:
            - name: BACKUP_PATH
              value: /backups
            image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
            imagePullPolicy: {{ .Values.mysql.image.pullPolicy }}
            name: mysql-clean-backup-{{ include "cgwi-php.fullname" . }}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /backups
              name: backups-dir
              subPath: db
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30
          volumes:
          - name: backups-dir
            persistentVolumeClaim:
              claimName: backups-{{ include "cgwi-php.fullname" . }}
  schedule: 0 2 */1 * *
  successfulJobsHistoryLimit: 4

{{ if .Values.secrets.s3backup -}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mysql-backup-s3-{{ include "cgwi-php.fullname" . }}
  labels:
    {{- include "cgwi-php.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            run: mysql-backup-s3
            {{- include "cgwi-php.labels" . | nindent 12 }}
        spec:
          containers:
          - command:
            - bash
            - -c
            - |
              set -Eeu -o pipefail;
              IFS=$'\n\t'

              FILE=$(readlink -f /backups/${DB}.sql.gz)
              BASENAME=$(basename "$FILE")
              resource="/${BUCKET}/${FULLNAME}.${BASENAME}"
              echo Writing $FILE to $resource
              contentType="application/octet-stream"
              dateValue=`date -R`
              stringToSign="PUT\n\n${contentType}\n${dateValue}\n${resource}"
              signature=`echo -en "${stringToSign}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64`
              curl -X PUT -T "$FILE" \
                -H "Host: ${BUCKET}.s3.amazonaws.com" \
                -H "Date: ${dateValue}" \
                -H "Content-Type: ${contentType}" \
                -H "Authorization: AWS ${S3KEY}:${signature}" \
                "https://${BUCKET}.s3.amazonaws.com/${FULLNAME}.${BASENAME}"
              date
              echo "Success!"
            env:
            - name: FULLNAME
              value: {{ include "cgwi-php.fullname" . }}
            - name: DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "cgwi-php.fullname" . }}-mysql
                  key: MYSQL_DATABASE
            envFrom:
            - secretRef:
                name: {{ include "cgwi-php.fullname" . }}-s3backup
            image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
            imagePullPolicy: IfNotPresent
            name: mysql-backup-s3-{{ include "cgwi-php.fullname" . }}
            volumeMounts:
            - mountPath: /backups
              name: backups-dir
              subPath: db
          volumes:
          - name: backups-dir
            persistentVolumeClaim:
              claimName: backups-{{ include "cgwi-php.fullname" . }}
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30
  schedule: 40 3 * * 1
  successfulJobsHistoryLimit: 2
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: storage-backup-s3-{{ include "cgwi-php.fullname" . }}
  labels:
    {{- include "cgwi-php.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            run: storage-backup-s3
            {{- include "cgwi-php.labels" . | nindent 12 }}
        spec:
          containers:
          - command:
            - bash
            - -c
            - |
              set -Eeu -o pipefail;
              IFS=$'\n\t'

              resource="/${BUCKET}/${FULLNAME}.storage.tjz"
              echo Writing to $resource
              contentType="application/octet-stream"
              # It appears we have to write to a temp file since AWS needs to know the size of the file
              TMPFILE=$(mktemp)
              tar cJvf "$TMPFILE" -C /storage .
              dateValue=`date -R`
              stringToSign="PUT\n\n${contentType}\n${dateValue}\n${resource}"
              signature=`echo -en "${stringToSign}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64`
              curl -X PUT -T "$TMPFILE" \
                  -H "Host: ${BUCKET}.s3.amazonaws.com" \
                  -H "Date: ${dateValue}" \
                  -H "Content-Type: ${contentType}" \
                  -H "Authorization: AWS ${S3KEY}:${signature}" \
                  "https://${BUCKET}.s3.amazonaws.com/${FULLNAME}.storage.tjz"
              rm -f "$TMPFILE"
              date
              echo "Success!"
            env:
            - name: FULLNAME
              value: {{ include "cgwi-php.fullname" . }}
            envFrom:
            - secretRef:
                name: {{ include "cgwi-php.fullname" . }}-s3backup
            image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
            imagePullPolicy: IfNotPresent
            name: mysql-backup-s3-{{ include "cgwi-php.fullname" . }}
            volumeMounts:
            - mountPath: /storage
              name: appdata
              subPath: storage
          volumes:
          - name: appdata
            persistentVolumeClaim:
              claimName: appdata-{{ include "cgwi-php.fullname" . }}
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30
  schedule: 45 3 * 1 *
  successfulJobsHistoryLimit: 2
{{- end -}}
